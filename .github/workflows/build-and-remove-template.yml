name: Build And Remove Docker Image
# A workflow template that handles building+removing SPRAS containers.

# Required inputs are:
# - path: The path to a container's Dockerfile directory, relative to the repo root
# - container: The registry/container to be built, without a tag
# - tag: The tag to be built
# - always-build: A boolean indicating whether the action should condition whether it builds the container
#       on any detected changes
# - context: The optional build context path, relative to the repo root.
on:
  workflow_call:
    inputs:
      path:
        required: true
        type: string
      container:
        required: true
        type: string
      tag:
        required: true
        type: string
      always-build:
        required: true
        type: boolean
      context:
        required: false
        type: string

jobs:
  build-and-remove-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2


      - name: Debug always-build input
        run: |
          echo "always-build: ${{ inputs.always-build }}"

      # Given the input path to the directory containing definitions of the container,
      # check whether anything at that path has been modified relative to master's head.
      # If so, we'll set `env.changed=true` to trigger the build in a later step
      - name: Check for changes
        if: ${{ inputs.always-build }} == 'false'
        id: check_changes
        run: |
          if git fetch origin master && git diff --name-only origin/master | grep -q "$(basename ${{ inputs.path }})"; then
            echo "Changes detected to ${{inputs.path}}."
            echo "changed=true" >> $GITHUB_ENV
          else
            echo "No changes detected to ${{ inputs.path}}"
            echo "changed=false" >> $GITHUB_ENV
          fi

      - name: Debug always-build input 2
        run: |
          echo "always-build: ${{ inputs.always-build }}"
          echo "github env: $GITHUB_ENV"
          cat $GITHUB_ENV
          echo "changed: $CHANGED"

      - name: Set changed to true for always-build
        if: ${{ inputs.always-build }} == 'true'
        run: |
          echo "Input for job 'always-build' is true -- building regardless of detected changes."
          echo "changed=true" >> $GITHUB_ENV


      - name: Debug always-build input 3
        run: |
          echo "always-build: ${{ inputs.always-build }}"
          echo "github env: $GITHUB_ENV"
          cat $GITHUB_ENV
          echo "changed: $CHANGED"

      - name: Build Docker image
        if: env.changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context || inputs.path }}/.
          file: ${{ inputs.path }}/Dockerfile
          tags: ${{ inputs.container }}:${{ inputs.tag }}
          # The cache will always use the `latest` tag, as we assume that results in the highest
          # amount of reusable container stuff.
          cache-from: type=registry,ref=${{ inputs.container }}:latest
          push: false

      # Clean/remove the container as we go -- we don't actually need it around, and it
      # counts against our action's disk quota.
      - name: Remove Docker image
        if: env.changed == 'true'
        run: docker rmi ${{ inputs.container }}:${{ inputs.tag }} || true
