name: Build and push container images

on:
  push:
    branches:
      - main
      - container-test
  repository_dispatch:
    types:
      - dispatch-build
  workflow_dispatch:

jobs:
  make-date-tag:
    runs-on: ubuntu-latest
    outputs:
      dtag: ${{ steps.mkdatetag.outputs.dtag }}
    steps:
      - name: make date tag
        id: mkdatetag
        run: echo "::set-output name=dtag::$(date +%Y%m%d-%H%M)"

  build-image-list:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.image-list.outputs.json }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - id: image-list
        run: |
          ORG_DIR=docker-wrappers
          # Get the list of files changed based on the type of event
          # kicking off the GHA:
          # ... (your existing logic) ...

          # Ensure that the generated JSON array has a member,
          # otherwise GHA will throw an error about an empty matrix
          # vector in subsequent steps
          image_json=$(echo -n "${images:-dummy}" | jq -Rcs '.|split("\n")')
          echo "::set-output name=json::$image_json"
          echo $image_json

  extract-dockerfile-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.extract_tag.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Extract Tag from Dockerfile
        id: extract_tag
        run: echo "::set-output name=tag::$(grep 'LABEL tag=' Dockerfile | sed -e 's/.*=//')"

  # build:









  #   runs-on: ubuntu-latest
  #   needs: build-image-list
  #   if: needs.build-image-list.outputs.images != '["dummy"]'
  #   # Prevent a single build failure from killing the workflow.
  #   # This is safe since subsequent pushes should fail on cache load
  #   continue-on-error: true
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       image: ${{ fromJson(needs.build-image-list.outputs.images) }}
  #       yum_repo: ['development', 'testing', 'release']
  #   steps:
  #     - name: Build ${{ matrix.image }}:3.6-${{ matrix.yum_repo }}
  #       continue-on-error: ${{ matrix.yum_repo == 'development' }}
  #       uses: opensciencegrid/build-container-action@v0.4.1
  #       with:
  #         osg_series: 3.6
  #         repo: ${{ matrix.yum_repo }}
  #         context: ${{ matrix.image }}

  # push:
  #   runs-on: ubuntu-latest
  #   if: >-
  #     github.ref == 'refs/heads/main' &&
  #     github.event_name != 'pull_request' &&
  #     github.repository_owner == 'opensciencegrid' &&
  #     needs.build-image-list.outputs.images != '["dummy"]'
  #   needs: [make-date-tag, build-image-list, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       image: ${{ fromJson(needs.build-image-list.outputs.images) }}
  #   steps:
  #     - name: Push to Harbor (3.6-development)
  #       if: always()
  #       uses: opensciencegrid/push-container-action@v0.5.0
  #       with:
  #         repo: development
  #         osg_series: 3.6
  #         context: ${{ matrix.image }}
  #         registry_url: hub.opensciencegrid.org
  #         registry_user: ${{ secrets.OSG_HARBOR_ROBOT_USER }}
  #         registry_pass: ${{ secrets.OSG_HARBOR_ROBOT_PASSWORD }}

  #     - name: Push to Harbor (3.6-release)
  #       if: always()
  #       uses: opensciencegrid/push-container-action@v0.5.0
  #       with:
  #         repo: release
  #         osg_series: 3.6
  #         context: ${{ matrix.image }}
  #         registry_url: hub.opensciencegrid.org
  #         registry_user: ${{ secrets.OSG_HARBOR_ROBOT_USER }}
  #         registry_pass: ${{ secrets.OSG_HARBOR_ROBOT_PASSWORD }}

  #     - name: Push to Docker Hub (3.6-development)
  #       if: always()
  #       uses: opensciencegrid/push-container-action@v0.5.0
  #       with:
  #         repo: development
  #         osg_series: 3.6
  #         context: ${{ matrix.image }}
  #         registry_url: docker.io
  #         registry_user: ${{ secrets.DOCKER_USERNAME }}
  #         registry_pass: ${{ secrets.DOCKER_PASSWORD }}
